<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'password',
        'password_confirmation',
    ];

    /**
     * Report or log an exception.
     *
     * @param  \Throwable  $exception
     * @return void
     *
     * @throws \Exception
     */
    public function report(Throwable $exception)
    {
        parent::report($exception);
    }

    /**
     * Render an exception into an HTTP response.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Throwable  $exception
     * @return \Symfony\Component\HttpFoundation\Response
     *
     * @throws \Throwable
     */
    public function render($request, Throwable $exception)
    {
        if ($this->isHttpException($exception)) {

            $error_code = $exception->getStatusCode();

            $messages['403'] = 'The request was a legal request, but the server is refusing to respond to it.';
            $messages['404'] = 'Sorry, the page you are looking for could not be found.';
            $messages['500'] = 'Opps ! there was an error while processing the request!';
            $messages['419'] = 'Page Expired!';

            if (in_array($error_code, array_keys($messages))) {
                return response()
                    ->view('errors.template', [
                        'error_code' => $error_code, 
                        'message' => $messages[$error_code]]
                    );
            }
        }

        return parent::render($request, $exception);
    }
}
